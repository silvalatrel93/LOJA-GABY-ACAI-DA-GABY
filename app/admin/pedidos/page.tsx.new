"use client"

import React, { useState, useEffect, useRef } from "react"
import Link from "next/link"
import { ArrowLeft, Printer, RefreshCw, Bell, BellOff, X } from "lucide-react"
import { getAllOrders, markOrderAsPrinted, updateOrderStatus, type Order } from "@/lib/db"
import { OrderService } from "@/lib/services/order-service"
import type { OrderStatus } from "@/lib/types"
import { formatCurrency } from "@/lib/utils"
import { formatDistanceToNow } from "date-fns"
import { ptBR } from "date-fns/locale"
import OrderLabelPrinter from "@/components/order-label-printer"
import { useNotificationSound } from "@/hooks/useNotificationSound"



export default function OrdersPage() {
  const [orders, setOrders] = useState<Order[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null)
  const [isPrinterModalOpen, setIsPrinterModalOpen] = useState(false)
  const [isSoundEnabled, setIsSoundEnabled] = useState(true)
  const [showNewOrderNotification, setShowNewOrderNotification] = useState(false)
  const [newOrdersCount, setNewOrdersCount] = useState(0)
  const { playSound } = useNotificationSound()
  const prevOrdersRef = useRef<Order[]>([])
  const checkIntervalRef = useRef<ReturnType<typeof setInterval> | null>(null)
  const notificationTimeoutRef = useRef<ReturnType<typeof setInterval> | null>(null)

  // Função para carregar pedidos
  const fetchOrders = React.useCallback(async (silent = false, isMounted = true): Promise<Order[] | null> => {
    try {
      if (!silent) setIsLoading(true);
      const ordersList = await getAllOrders();
      
      if (!isMounted) return null;
      
      // Ordenar por data, mais recentes primeiro
      return [...ordersList].sort((a, b) => 
        new Date(b.date).getTime() - new Date(a.date).getTime()
      );
    } catch (error) {
      console.error("Erro ao carregar pedidos:", error);
      return null;
    } finally {
      if (!silent) setIsLoading(false);
    }
  }, []);

  // Função para processar e atualizar pedidos
  const processOrders = React.useCallback(async (orders: Order[] | null, isMounted = true) => {
    if (!orders || !isMounted) return;
    
    // Verificar se há novos pedidos que ainda não foram notificados
    // Em vez de comparar com a referência anterior, verificamos a propriedade notified
    const newOrders = orders.filter(order => !order.notified && order.status === "new");
    
    // Se houver novos pedidos, marcá-los como notificados
    if (newOrders.length > 0) {
      try {
        // Marcar cada pedido como notificado no banco de dados
        await Promise.all(
          newOrders.map(order =>
            OrderService.markOrderAsNotified(order.id).catch(error => {
              console.error(`Erro ao marcar pedido ${order.id} como notificado:`, error);
              return false; // Continuar mesmo em caso de erro
            })
          )
        );
        
        // Atualizar os pedidos localmente para refletir a mudança
        const updatedOrders = orders.map(order => 
          newOrders.some(o => o.id === order.id) 
            ? { ...order, notified: true } 
            : order
        );
        
        // Usar atualização de estado em lote
        React.startTransition(() => {
          if (!isMounted) return;
          
          // Tocar som e mostrar notificação para novos pedidos
          if (isSoundEnabled) {
            playSound('newOrder');
            
            // Configurar repetição do som a cada 30 segundos enquanto a notificação estiver visível
            if (notificationTimeoutRef.current) {
              clearInterval(notificationTimeoutRef.current);
            }
            
            notificationTimeoutRef.current = setInterval(() => {
              if (isMounted && showNewOrderNotification) {
                playSound('newOrder');
              } else if (!showNewOrderNotification) {
                // Parar de tocar se a notificação for fechada
                if (notificationTimeoutRef.current) {
                  clearInterval(notificationTimeoutRef.current);
                  notificationTimeoutRef.current = null;
                }
              }
            }, 30000); // Repetir a cada 30 segundos
          }
          
          // Atualizar contador de novos pedidos
          setNewOrdersCount(prev => prev + newOrders.length);
          
          // Mostrar notificação (permanecerá visível até ser fechada manualmente)
          setShowNewOrderNotification(true);
          
          // Atualizar a referência para os pedidos atuais
          prevOrdersRef.current = updatedOrders;
          setOrders(updatedOrders);
        });
        
      } catch (error) {
        console.error("Erro ao marcar pedidos como notificados:", error);
        // Continuar mesmo em caso de erro
      }
    } else if (JSON.stringify(prevOrdersRef.current) !== JSON.stringify(orders)) {
      // Se não houver novos pedidos, mas houver outras mudanças, atualizar a lista
      React.startTransition(() => {
        if (isMounted) {
          prevOrdersRef.current = orders;
          setOrders(orders);
        }
      });
    }
  }, [isSoundEnabled, playSound, showNewOrderNotification]);

  // Função para carregar pedidos (usada externamente)
  const loadOrders = React.useCallback(async (silent = false): Promise<void> => {
    const orders = await fetchOrders(silent);
    if (orders) {
      processOrders(orders);
    }
  }, [fetchOrders, processOrders]);

  // Configurar verificação periódica de novos pedidos
  useEffect(() => {
    let isMounted = true;
    let isFetching = false;
    
    // Função para carregar e processar pedidos
    const loadAndProcessOrders = async (silent = true) => {
      if (isFetching) return;
      isFetching = true;
      
      try {
        const orders = await fetchOrders(silent, isMounted);
        if (orders && isMounted) {
          processOrders(orders, isMounted);
        }
      } finally {
        if (isMounted) {
          isFetching = false;
        }
      }
    };
    
    // Carregar pedidos iniciais
    void loadAndProcessOrders(false);
    
    // Configurar polling a cada 5 segundos para verificar novos pedidos mais rapidamente
    const pollingInterval = setInterval(() => {
      if (isMounted) {
        void loadAndProcessOrders(true);
      }
    }, 5000); // Reduzido de 30000 para 5000 (5 segundos)
    
    // Armazenar a referência do intervalo
    checkIntervalRef.current = pollingInterval;
    
    // Limpar intervalos e timeouts ao desmontar
    return () => {
      isMounted = false;
      
      if (checkIntervalRef.current) {
        clearInterval(checkIntervalRef.current);
        checkIntervalRef.current = null;
      }
      
      if (notificationTimeoutRef.current) {
        clearInterval(notificationTimeoutRef.current);
        notificationTimeoutRef.current = null;
      }
    };
  }, [fetchOrders, processOrders, isSoundEnabled]); // Dependências do efeito

  const handleStatusChange = React.useCallback(async (orderId: Order['id'], status: OrderStatus): Promise<void> => {
    try {
      await updateOrderStatus(orderId, status);
      // Atualizar a lista de pedidos
      await loadOrders(true); // Usar carregamento silencioso
    } catch (error) {
      console.error("Erro ao atualizar status do pedido:", error);
      alert("Erro ao atualizar status do pedido. Tente novamente.");
    }
  }, [loadOrders]);

  const handlePrintLabel = React.useCallback((order: Order) => {
    setSelectedOrder(order);
    setIsPrinterModalOpen(true);
  }, []);

  const handlePrintComplete = React.useCallback(async () => {
    if (selectedOrder?.id) {
      try {
        await markOrderAsPrinted(selectedOrder.id);
        await loadOrders(true); // Usar carregamento silencioso
      } catch (error) {
        console.error("Erro ao marcar pedido como impresso:", error);
      }
    }
    setIsPrinterModalOpen(false);
    setSelectedOrder(null);
  }, [selectedOrder, loadOrders]);

  const getStatusColor = (status: OrderStatus): string => {
    switch (status) {
      case "new":
        return "bg-blue-100 text-blue-800"
      case "preparing":
        return "bg-yellow-100 text-yellow-800"
      case "delivering":
        return "bg-purple-100 text-purple-800"
      case "completed":
        return "bg-green-100 text-green-800"
      case "cancelled":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getStatusText = (status: OrderStatus): string => {
    switch (status) {
      case "new":
        return "Novo"
      case "preparing":
        return "Em Preparo"
      case "delivering":
        return "Em Entrega"
      case "completed":
        return "Concluído"
      case "cancelled":
        return "Cancelado"
      default:
        return status
    }
  }

  return (
    <div className="min-h-screen flex flex-col">
      <header className="bg-purple-900 text-white p-4">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center">
            <Link href="/admin" className="mr-4">
              <ArrowLeft size={24} />
            </Link>
            <h1 className="text-xl font-bold">Gerenciar Pedidos</h1>
          </div>
          <div className="flex items-center">
            <button
              onClick={() => loadOrders(false)}
              className="bg-white text-purple-900 px-4 py-2 rounded-md font-medium flex items-center"
            >
              <RefreshCw size={18} className="mr-1" />
              Atualizar
            </button>
            <button 
              onClick={() => setIsSoundEnabled(!isSoundEnabled)} 
              className="ml-3 p-2 rounded-full hover:bg-purple-200 transition-colors"
              title={isSoundEnabled ? "Desativar notificações de som" : "Ativar notificações de som"}
            >
              {isSoundEnabled ? <Bell size={18} /> : <BellOff size={18} />}
            </button>
          </div>
        </div>
      </header>

      {/* Notificação de novo pedido */}
      {showNewOrderNotification && (
        <div className="fixed top-4 right-4 bg-green-600 text-white px-6 py-4 rounded-lg shadow-xl z-50 flex flex-col space-y-3 animate-pulse">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <Bell className="mr-2" size={20} />
              <p className="font-bold text-lg">Novo Pedido Recebido!</p>
            </div>
            <button 
              onClick={() => {
                if (notificationTimeoutRef.current) {
                  clearInterval(notificationTimeoutRef.current);
                  notificationTimeoutRef.current = null;
                }
                setShowNewOrderNotification(false);
                setNewOrdersCount(0);
              }}
              className="text-white hover:text-gray-200 p-1"
              aria-label="Fechar notificação"
            >
              <X size={18} />
            </button>
          </div>
          
          <div className="bg-green-700 px-4 py-3 rounded-md">
            <p className="text-md font-medium">{newOrdersCount} novo{newOrdersCount > 1 ? 's' : ''} pedido{newOrdersCount > 1 ? 's' : ''} para preparo</p>
          </div>
          
          <div className="flex justify-end space-x-2 pt-1">
            <button
              onClick={() => {
                // Marcar como concluído e fechar notificação
                if (notificationTimeoutRef.current) {
                  clearInterval(notificationTimeoutRef.current);
                  notificationTimeoutRef.current = null;
                }
                setShowNewOrderNotification(false);
                setNewOrdersCount(0);
                
                // Redirecionar para a seção de novos pedidos
                const newOrdersSection = document.getElementById('new-orders-section');
                if (newOrdersSection) {
                  newOrdersSection.scrollIntoView({ behavior: 'smooth' });
                }
              }}
              className="bg-white text-green-700 px-4 py-2 rounded-md font-medium hover:bg-green-100 transition-colors"
            >
              Concluído
            </button>
          </div>
        </div>
      )}

      <div className="flex-1 container mx-auto p-4">
        <div className="bg-white rounded-lg shadow-md p-4 mb-4">
          <h2 className="text-lg font-semibold text-purple-900 mb-4">Pedidos Recebidos</h2>

          {isLoading ? (
            <div className="flex justify-center items-center p-8">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-700"></div>
            </div>
          ) : orders.length === 0 ? (
            <p className="text-center text-gray-500 py-8">Nenhum pedido recebido ainda.</p>
          ) : (
            <div id="new-orders-section" className="space-y-4">
              {orders.map((order) => (
                <div key={order.id} className="border rounded-lg overflow-hidden">
                  <div className="p-4">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-semibold text-lg">Pedido #{order.id}</h3>
                        <p className="text-sm text-gray-500">
                          {formatDistanceToNow(new Date(order.date), { addSuffix: true, locale: ptBR })}
                        </p>
                      </div>
                      <div className="flex items-center">
                        <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(order.status)} mr-2`}>
                          {getStatusText(order.status)}
                        </span>
                        {order.printed && (
                          <span className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full mr-2">Impresso</span>
                        )}
                        <button
                          onClick={() => handlePrintLabel(order)}
                          className="bg-purple-100 text-purple-800 p-1 rounded-full"
                          title="Imprimir Etiqueta"
                        >
                          <Printer size={16} />
                        </button>
                      </div>
                    </div>

                    <div className="mt-3">
                      <h4 className="font-medium text-sm text-gray-700">Cliente</h4>
                      <p>
                        {order.customerName} • {order.customerPhone}
                      </p>
                    </div>

                    <div className="mt-3">
                      <h4 className="font-medium text-sm text-gray-700">Endereço</h4>
                      <p>
                        {order.address.street}, {order.address.number} - {order.address.neighborhood}
                        {order.address.complement && ` (${order.address.complement})`}
                      </p>
                    </div>

                    <div className="mt-3">
                      <h4 className="font-medium text-sm text-gray-700">Itens</h4>
                      <ul className="space-y-3">
                        {order.items.map((item, index) => (
                          <li key={index} className="border-b pb-2 last:border-b-0">
                            <div className="flex justify-between">
                              <span>
                                {item.quantity}x {item.name} ({item.size})
                              </span>
                              <span>{formatCurrency(item.price * item.quantity)}</span>
                            </div>
                            {item.additionals && item.additionals.length > 0 ? (
                              <div className="mt-1">
                                <p className="text-sm text-purple-700 italic">Com Adicionais:</p>
                                <ul className="pl-8">
                                  {item.additionals.map((additional, addIdx) => (
                                    <li key={addIdx} className="text-sm">
                                      • {additional.quantity || 1}x {additional.name} -{" "}
                                      {additional.price > 0 ? formatCurrency(additional.price * (additional.quantity || 1)) : "Grátis"}
                                    </li>
                                  ))}
                                </ul>
                              </div>
                            ) : (
                              <p className="text-sm text-gray-500 italic mt-1">Sem Adicionais</p>
                            )}
                          </li>
                        ))}
                      </ul>
                    </div>

                    <div className="mt-3 pt-2 border-t">
                      <div className="flex justify-between">
                        <span>Subtotal</span>
                        <span>{formatCurrency(order.subtotal)}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Taxa de entrega</span>
                        <span>{formatCurrency(order.deliveryFee)}</span>
                      </div>
                      <div className="flex justify-between font-bold">
                        <span>Total</span>
                        <span>{formatCurrency(order.total)}</span>
                      </div>
                      <div className="mt-1">
                        <span className="text-sm text-gray-600">
                          Pagamento: {order.paymentMethod === "pix" ? "PIX" : "Cartão na Entrega"}
                        </span>
                      </div>
                    </div>

                    <div className="mt-4 pt-3 border-t">
                      <h4 className="font-medium text-sm text-gray-700 mb-2">Atualizar Status</h4>
                      <div className="flex flex-wrap gap-2">
                        <button
                          onClick={() => handleStatusChange(order.id!, "new")}
                          className={`px-2 py-1 text-xs rounded-md ${
                            order.status === "new"
                              ? "bg-blue-600 text-white"
                              : "bg-blue-100 text-blue-800 hover:bg-blue-200"
                          }`}
                        >
                          Novo
                        </button>
                        <button
                          onClick={() => handleStatusChange(order.id!, "preparing")}
                          className={`px-2 py-1 text-xs rounded-md ${
                            order.status === "preparing"
                              ? "bg-yellow-600 text-white"
                              : "bg-yellow-100 text-yellow-800 hover:bg-yellow-200"
                          }`}
                        >
                          Em Preparo
                        </button>
                        <button
                          onClick={() => handleStatusChange(order.id!, "delivering")}
                          className={`px-2 py-1 text-xs rounded-md ${
                            order.status === "delivering"
                              ? "bg-purple-600 text-white"
                              : "bg-purple-100 text-purple-800 hover:bg-purple-200"
                          }`}
                        >
                          Em Entrega
                        </button>
                        <button
                          onClick={() => handleStatusChange(order.id!, "completed")}
                          className={`px-2 py-1 text-xs rounded-md ${
                            order.status === "completed"
                              ? "bg-green-600 text-white"
                              : "bg-green-100 text-green-800 hover:bg-green-200"
                          }`}
                        >
                          Concluído
                        </button>
                        <button
                          onClick={() => handleStatusChange(order.id!, "cancelled")}
                          className={`px-2 py-1 text-xs rounded-md ${
                            order.status === "cancelled"
                              ? "bg-red-600 text-white"
                              : "bg-red-100 text-red-800 hover:bg-red-200"
                          }`}
                        >
                          Cancelado
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Modal de Impressão */}
      {isPrinterModalOpen && selectedOrder && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-auto">
            <div className="p-4 border-b">
              <h2 className="text-lg font-semibold text-purple-900">Imprimir Etiqueta</h2>
            </div>

            <div className="p-4">
              <OrderLabelPrinter order={selectedOrder} onPrintComplete={handlePrintComplete} />
            </div>

            <div className="p-4 border-t flex justify-end">
              <button
                onClick={() => setIsPrinterModalOpen(false)}
                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700"
              >
                Fechar
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
