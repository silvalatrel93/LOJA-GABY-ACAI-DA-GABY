"use client"

import React, { useState, useEffect, useRef } from "react"
import Link from "next/link"
import { ArrowLeft, Printer, RefreshCw, Bell, BellOff, X } from "lucide-react"
import { getAllOrders, markOrderAsPrinted, updateOrderStatus, type Order } from "@/lib/db"
import { OrderService } from "@/lib/services/order-service"
import type { OrderStatus } from "@/lib/types"
import { formatCurrency } from "@/lib/utils"
import { formatDistanceToNow } from "date-fns"
import { ptBR } from "date-fns/locale"
import OrderLabelPrinter from "@/components/order-label-printer"
import { useNotificationSound } from "@/hooks/useNotificationSound"

export default function OrdersPage() {
  const [orders, setOrders] = useState<Order[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null)
  const [isPrinterModalOpen, setIsPrinterModalOpen] = useState(false)
  const [isSoundEnabled, setIsSoundEnabled] = useState(true)
  const [showNewOrderNotification, setShowNewOrderNotification] = useState(false)
  const [newOrdersCount, setNewOrdersCount] = useState(0)
  const { playSound } = useNotificationSound()
  const prevOrdersRef = useRef<Order[]>([])
  const checkIntervalRef = useRef<ReturnType<typeof setInterval> | null>(null)
  const notificationTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)

  // Função para carregar pedidos
  const fetchOrders = React.useCallback(async (silent = false, isMounted = true): Promise<Order[] | null> => {
    console.log('[fetchOrders] Iniciando fetchOrders, silent:', silent, 'isMounted:', isMounted);
    try {
      if (!silent) {
        console.log('[fetchOrders] Ativando estado de carregamento');
        setIsLoading(true);
      }
      
      console.log('[fetchOrders] Chamando getAllOrders()...');
      const startTime = Date.now();
      const ordersList = await getAllOrders();
      console.log(`[fetchOrders] getAllOrders concluído em ${Date.now() - startTime}ms`, { count: ordersList?.length });
      
      if (!isMounted) {
        console.log('[fetchOrders] Componente desmontado, retornando null');
        return null;
      }
      
      // Ordenar por data, mais recentes primeiro
      const sortedOrders = [...(ordersList || [])].sort((a, b) => 
        new Date(b.date).getTime() - new Date(a.date).getTime()
      );
      
      console.log(`[fetchOrders] Retornando ${sortedOrders.length} pedidos ordenados`);
      return sortedOrders;
      
    } catch (error) {
      console.error('[fetchOrders] Erro ao carregar pedidos:', error);
      return null;
    } finally {
      if (!silent) {
        console.log('[fetchOrders] Desativando estado de carregamento');
        setIsLoading(false);
      }
    }
  }, []);

  // Função para processar e atualizar pedidos
  const processOrders = React.useCallback(async (newOrdersList: Order[] | null, isMounted = true) => {
    console.log('[processOrders] Iniciando processamento de pedidos');
    
    if (!newOrdersList || !isMounted) {
      console.log('[processOrders] Sem pedidos ou componente desmontado');
      return;
    }
    
    try {
      // Criar um mapa de IDs para verificação rápida
      const currentOrderIds = new Set(prevOrdersRef.current.map(order => order.id));
      
      // Encontrar apenas pedidos realmente novos
      const newOrders = newOrdersList.filter(order => !currentOrderIds.has(order.id));
      
      console.log(`[processOrders] ${newOrders.length} novos pedidos encontrados`);
      
      // Se não houver pedidos novos e a lista for a mesma, não faz nada
      if (newOrders.length === 0 && 
          JSON.stringify(prevOrdersRef.current) === JSON.stringify(newOrdersList)) {
        console.log('[processOrders] Nenhuma alteração nos pedidos, ignorando atualização');
        return;
      }
      
      // Se houver pedidos novos, marcá-los como notificados
      if (newOrders.length > 0) {
        try {
          console.log('[processOrders] Marcando novos pedidos como notificados...');
          
          // Usar Promise.allSettled para continuar mesmo se alguma notificação falhar
          const results = await Promise.allSettled(
            newOrders.map(order =>
              OrderService.markOrderAsNotified(order.id)
                .then(success => {
                  console.log(`[processOrders] Pedido ${order.id} marcado como notificado:`, success);
                  return { order, success };
                })
            )
          );
          
          // Processar resultados
          const successfulNotifications = results
            .filter((result): result is PromiseFulfilledResult<{order: Order, success: boolean}> => 
              result.status === 'fulfilled' && result.value.success
            )
            .map(result => result.value.order);
          
          console.log(`[processOrders] ${successfulNotifications.length} pedidos marcados com sucesso`);
          
          // Se não houver notificações bem-sucedidas, não há nada para atualizar
          if (successfulNotifications.length === 0) {
            console.log('[processOrders] Nenhum pedido foi marcado como notificado com sucesso');
            return;
          }
          
          // Atualizar os pedidos localmente para refletir a mudança
          const updatedOrders = newOrdersList.map(order => 
            successfulNotifications.some(o => o.id === order.id) 
              ? { ...order, notified: true } 
              : order
          );
          
          console.log('[processOrders] Atualizando estado com novos pedidos...');
          
          // Usar requestAnimationFrame para agrupar atualizações de estado
          requestAnimationFrame(() => {
            if (!isMounted) {
              console.log('[processOrders] Componente desmontado durante atualização de estado');
              return;
            }
            
            // Tocar som e mostrar notificação para novos pedidos
            if (isSoundEnabled) {
              console.log('[processOrders] Tocando som de notificação');
              playSound('newOrder');
              
              // Mostrar notificação
              console.log('[processOrders] Mostrando notificação de novos pedidos');
              setShowNewOrderNotification(true);
              
              // Esconder notificação após 10 segundos
              if (notificationTimeoutRef.current) {
                clearTimeout(notificationTimeoutRef.current);
              }
              
              notificationTimeoutRef.current = setTimeout(() => {
                if (isMounted) {
                  console.log('[processOrders] Escondendo notificação após timeout');
                  setShowNewOrderNotification(false);
                  setNewOrdersCount(0);
                }
              }, 10000);
            }
            
            // Atualizar contador de novos pedidos
            setNewOrdersCount(prev => prev + successfulNotifications.length);
            
            // Atualizar a referência para os pedidos atuais
            console.log(`[processOrders] Atualizando referência para ${updatedOrders.length} pedidos`);
            prevOrdersRef.current = updatedOrders;
            
            // Atualizar o estado dos pedidos
            console.log('[processOrders] Atualizando estado dos pedidos');
            setOrders(updatedOrders);
          });
          
        } catch (error) {
          console.error('[processOrders] Erro ao processar novos pedidos:', error);
        }
      } else {
        // Se não há pedidos novos, apenas atualiza a referência se necessário
        console.log('[processOrders] Atualizando lista de pedidos (sem novos pedidos)');
        
        requestAnimationFrame(() => {
          if (isMounted) {
            console.log(`[processOrders] Atualizando referência para ${newOrdersList.length} pedidos`);
            prevOrdersRef.current = newOrdersList;
            setOrders(newOrdersList);
          }
        });
      }
    } catch (error) {
      console.error('[processOrders] Erro inesperado ao processar pedidos:', error);
    }
  }, [isSoundEnabled, playSound]);

  // Função para carregar pedidos (usada externamente)
  const loadOrders = React.useCallback(async (silent = false): Promise<void> => {
    console.log('[loadOrders] Iniciando carregamento de pedidos, silent:', silent);
    try {
      const orders = await fetchOrders(silent);
      if (orders) {
        console.log(`[loadOrders] ${orders.length} pedidos carregados, processando...`);
        await processOrders(orders);
      } else {
        console.log('[loadOrders] Nenhum pedido retornado do fetchOrders');
      }
    } catch (error) {
      console.error('[loadOrders] Erro ao carregar pedidos:', error);
    }
  }, [fetchOrders, processOrders]);
    } catch (error) {
      console.error('[loadOrders] Erro ao carregar pedidos:', error);
    }
  }, [fetchOrders, processOrders]);

  // Configurar verificação periódica de novos pedidos
  useEffect(() => {
    console.log('[useEffect] Configurando verificação periódica de pedidos');
    let isMounted = true;
    let isFetching = false;
    let pollingInterval: NodeJS.Timeout | null = null;
    
    // Flag para controlar se já temos os dados iniciais
    let hasInitialData = false;
    
    // Função para carregar e processar pedidos
    const loadAndProcessOrders = async (isPolling = false) => {
      // Se já está buscando, ignora chamadas simultâneas
      if (isFetching) {
        console.log('[loadAndProcessOrders] Busca já em andamento, ignorando...');
        return;
      }
      
      // Se é uma chamada de polling e ainda não temos os dados iniciais, ignora
      if (isPolling && !hasInitialData) {
        console.log('[loadAndProcessOrders] Dados iniciais ainda não carregados, ignorando polling');
        return;
      }
      
      isFetching = true;
      const requestId = Math.random().toString(36).substr(2, 6);
      const silent = isPolling; // Se for polling, é silencioso
      
      console.log(`[loadAndProcessOrders:${requestId}] Iniciando ${isPolling ? 'polling' : 'carregamento'}${silent ? ' silencioso' : ''}`);
      
      try {
        // Usar um pequeno atraso para evitar sobrecarga
        await new Promise(resolve => setTimeout(resolve, silent ? 0 : 100));
        
        if (!isMounted) {
          console.log(`[loadAndProcessOrders:${requestId}] Componente desmontado durante o atraso`);
          return;
        }
        
        console.log(`[loadAndProcessOrders:${requestId}] Buscando pedidos...`);
        const startTime = Date.now();
        
        // Buscar pedidos
        const orders = await fetchOrders(silent, isMounted);
        
        if (!isMounted) {
          console.log(`[loadAndProcessOrders:${requestId}] Componente desmontado durante busca`);
          return;
        }
        
        console.log(`[loadAndProcessOrders:${requestId}] ${orders?.length || 0} pedidos encontrados em ${Date.now() - startTime}ms`);
        
        if (orders) {
          // Se for o carregamento inicial, marcar que temos os dados iniciais
          if (!isPolling) {
            hasInitialData = true;
          }
          
          // Processar pedidos
          console.log(`[loadAndProcessOrders:${requestId}] Processando pedidos...`);
          await processOrders(orders, isMounted);
          console.log(`[loadAndProcessOrders:${requestId}] Processamento concluído`);
        }
      } catch (error) {
        console.error(`[loadAndProcessOrders:${requestId}] Erro:`, error);
      } finally {
        if (isMounted) {
          isFetching = false;
          console.log(`[loadAndProcessOrders:${requestId}] Busca finalizada`);
        }
      }
    };
    
    // Função para configurar o polling
    const setupPolling = () => {
      // Limpar intervalo existente se houver
      if (pollingInterval) {
        console.log('[setupPolling] Limpando intervalo de polling existente');
        clearInterval(pollingInterval);
      }
      
      // Configurar novo intervalo (30 segundos)
      const POLLING_INTERVAL = 30000;
      console.log(`[setupPolling] Configurando novo intervalo de polling (${POLLING_INTERVAL}ms)`);
      
      pollingInterval = setInterval(() => {
        if (!isMounted) {
          console.log('[setupPolling] Componente desmontado, ignorando polling');
          return;
        }
        
        console.log('[setupPolling] Verificação periódica de pedidos...');
        void loadAndProcessOrders(true);
      }, POLLING_INTERVAL);
      
      return pollingInterval;
    };
    
    // Iniciar o carregamento inicial
    console.log('[useEffect] Iniciando carregamento inicial de pedidos...');
    
    // Usar um pequeno atraso para evitar sobrecarga inicial
    const initialLoadTimeout = setTimeout(() => {
      if (!isMounted) {
        console.log('[useEffect] Componente desmontado antes do carregamento inicial');
        return;
      }
      
      console.log('[useEffect] Iniciando carga inicial de pedidos...');
      
      loadAndProcessOrders(false).then(() => {
        if (!isMounted) {
          console.log('[useEffect] Componente desmontado após carga inicial');
          return;
        }
        
        console.log('[useEffect] Carga inicial concluída, configurando polling...');
        checkIntervalRef.current = setupPolling();
      }).catch(error => {
        console.error('[useEffect] Erro na carga inicial:', error);
      });
    }, 300); // Pequeno atraso para evitar sobrecarga
    
    // Limpar recursos ao desmontar
    return () => {
      console.log('[useEffect] Iniciando limpeza...');
      isMounted = false;
      
      // Limpar timeouts
      console.log('[useEffect] Limpando timeouts...');
      clearTimeout(initialLoadTimeout);
      
      // Limpar intervalo de polling
      if (pollingInterval) {
        console.log('[useEffect] Limpando intervalo de polling');
        clearInterval(pollingInterval);
      }
      
      // Limpar referências
      if (notificationTimeoutRef.current) {
        console.log('[useEffect] Limpando timeout de notificação');
        clearTimeout(notificationTimeoutRef.current);
        notificationTimeoutRef.current = null;
      }
      if (checkIntervalRef.current) {
        console.log('[useEffect] Limpando intervalo de verificação de pedidos');
        clearInterval(checkIntervalRef.current);
        checkIntervalRef.current = null;
      }
      
      console.log('[useEffect] Limpeza concluída');
    };
  }, [isSoundEnabled, playSound, fetchOrders, processOrders]); // Dependências do efeito

  const handleStatusChange = React.useCallback(async (orderId: Order['id'], status: OrderStatus): Promise<void> => {
    try {
      await updateOrderStatus(orderId, status);
      // Atualizar a lista de pedidos
      await loadOrders(true); // Usar carregamento silencioso
    } catch (error) {
      console.error("Erro ao atualizar status do pedido:", error);
      alert("Erro ao atualizar status do pedido. Tente novamente.");
    }
  }, [loadOrders]);

  const handlePrintLabel = React.useCallback((order: Order) => {
    setSelectedOrder(order);
    setIsPrinterModalOpen(true);
  }, []);

  const handlePrintComplete = React.useCallback(async () => {
    if (selectedOrder?.id) {
      try {
        await markOrderAsPrinted(selectedOrder.id);
        await loadOrders(true); // Usar carregamento silencioso
      } catch (error) {
        console.error("Erro ao marcar pedido como impresso:", error);
      }
    }
    setIsPrinterModalOpen(false);
    setSelectedOrder(null);
  }, [selectedOrder, loadOrders]);

  const getStatusColor = (status: OrderStatus): string => {
    switch (status) {
      case "new":
        return "bg-blue-100 text-blue-800"
      case "preparing":
        return "bg-yellow-100 text-yellow-800"
      case "delivering":
        return "bg-purple-100 text-purple-800"
      case "completed":
        return "bg-green-100 text-green-800"
      case "cancelled":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getStatusText = (status: OrderStatus): string => {
    switch (status) {
      case "new":
        return "Novo"
      case "preparing":
        return "Em Preparo"
      case "delivering":
        return "Em Entrega"
      case "completed":
        return "Concluído"
      case "cancelled":
        return "Cancelado"
      default:
        return status
    }
  }

  return (
    <div className="min-h-screen flex flex-col">
      <header className="bg-purple-900 text-white p-4">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center">
            <Link href="/admin" className="mr-4">
              <ArrowLeft size={24} />
            </Link>
            <h1 className="text-xl font-bold">Gerenciar Pedidos</h1>
          </div>
          <div className="flex items-center">
            <button
              onClick={() => loadOrders(false)}
              className="bg-white text-purple-900 px-4 py-2 rounded-md font-medium flex items-center"
            >
              <RefreshCw size={18} className="mr-1" />
              Atualizar
            </button>
            <button 
              onClick={() => setIsSoundEnabled(!isSoundEnabled)} 
              className="ml-3 p-2 rounded-full hover:bg-purple-200 transition-colors"
              title={isSoundEnabled ? "Desativar notificações de som" : "Ativar notificações de som"}
            >
              {isSoundEnabled ? <Bell size={18} /> : <BellOff size={18} />}
            </button>
          </div>
        </div>
      </header>

      {/* Notificação de novo pedido */}
      {showNewOrderNotification && (
        <div className="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center space-x-4 animate-bounce">
          <div className="flex-1">
            <p className="font-semibold">Novo Pedido Recebido!</p>
            <p className="text-sm">{newOrdersCount} novo{newOrdersCount > 1 ? 's' : ''} pedido{newOrdersCount > 1 ? 's' : ''} para preparo.</p>
          </div>
          <button 
            onClick={() => {
              setShowNewOrderNotification(false)
              setNewOrdersCount(0)
            }}
            className="text-white hover:text-gray-200"
            aria-label="Fechar notificação"
          >
            <X size={20} />
          </button>
        </div>
      )}

      <div className="flex-1 container mx-auto p-4">
        <div className="bg-white rounded-lg shadow-md p-4 mb-4">
          <h2 className="text-lg font-semibold text-purple-900 mb-4">Pedidos Recebidos</h2>

          {isLoading ? (
            <div className="flex justify-center items-center p-8">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-700"></div>
            </div>
          ) : orders.length === 0 ? (
            <p className="text-center text-gray-500 py-8">Nenhum pedido recebido ainda.</p>
          ) : (
            <div className="space-y-4">
              {orders.map((order) => (
                <div key={order.id} className="border rounded-lg overflow-hidden">
                  <div className="p-4">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-semibold text-lg">Pedido #{order.id}</h3>
                        <p className="text-sm text-gray-500">
                          {formatDistanceToNow(new Date(order.date), { addSuffix: true, locale: ptBR })}
                        </p>
                      </div>
                      <div className="flex items-center">
                        <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(order.status)} mr-2`}>
                          {getStatusText(order.status)}
                        </span>
                        {order.printed ? (
                          <span className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full">Impresso</span>
                        ) : (
                          <button
                            onClick={() => handlePrintLabel(order)}
                            className="bg-purple-100 text-purple-800 p-1 rounded-full"
                            title="Imprimir Etiqueta"
                          >
                            <Printer size={16} />
                          </button>
                        )}
                      </div>
                    </div>

                    <div className="mt-3">
                      <h4 className="font-medium text-sm text-gray-700">Cliente</h4>
                      <p>
                        {order.customerName} • {order.customerPhone}
                      </p>
                    </div>

                    <div className="mt-3">
                      <h4 className="font-medium text-sm text-gray-700">Endereço</h4>
                      <p>
                        {order.address.street}, {order.address.number} - {order.address.neighborhood}
                        {order.address.complement && ` (${order.address.complement})`}
                      </p>
                    </div>

                    <div className="mt-3">
                      <h4 className="font-medium text-sm text-gray-700">Itens</h4>
                      <ul className="space-y-3">
                        {order.items.map((item, index) => (
                          <li key={index} className="border-b pb-2 last:border-b-0">
                            <div className="flex justify-between">
                              <span>
                                {item.quantity}x {item.name} ({item.size})
                              </span>
                              <span>{formatCurrency(item.price * item.quantity)}</span>
                            </div>
                            {item.additionals && item.additionals.length > 0 ? (
                              <div className="mt-1">
                                <p className="text-sm text-purple-700 italic">Com Adicionais:</p>
                                <ul className="pl-4">
                                  {item.additionals.map((additional, idx) => (
                                    <li key={idx} className="text-sm">
                                      • {additional.quantity || 1}x {additional.name} -{" "}
                                      {formatCurrency(additional.price * (additional.quantity || 1))}
                                    </li>
                                  ))}
                                </ul>
                              </div>
                            ) : (
                              <p className="text-sm text-gray-500 italic mt-1">Sem Adicionais:</p>
                            )}
                          </li>
                        ))}
                      </ul>
                    </div>

                    <div className="mt-3 pt-2 border-t">
                      <div className="flex justify-between">
                        <span>Subtotal</span>
                        <span>{formatCurrency(order.subtotal)}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Taxa de entrega</span>
                        <span>{formatCurrency(order.deliveryFee)}</span>
                      </div>
                      <div className="flex justify-between font-bold">
                        <span>Total</span>
                        <span>{formatCurrency(order.total)}</span>
                      </div>
                      <div className="mt-1">
                        <span className="text-sm text-gray-600">
                          Pagamento: {order.paymentMethod === "pix" ? "PIX" : "Cartão na Entrega"}
                        </span>
                      </div>
                    </div>

                    <div className="mt-4 pt-3 border-t">
                      <h4 className="font-medium text-sm text-gray-700 mb-2">Atualizar Status</h4>
                      <div className="flex flex-wrap gap-2">
                        <button
                          onClick={() => handleStatusChange(order.id!, "new")}
                          className={`px-2 py-1 text-xs rounded-md ${
                            order.status === "new"
                              ? "bg-blue-600 text-white"
                              : "bg-blue-100 text-blue-800 hover:bg-blue-200"
                          }`}
                        >
                          Novo
                        </button>
                        <button
                          onClick={() => handleStatusChange(order.id!, "preparing")}
                          className={`px-2 py-1 text-xs rounded-md ${
                            order.status === "preparing"
                              ? "bg-yellow-600 text-white"
                              : "bg-yellow-100 text-yellow-800 hover:bg-yellow-200"
                          }`}
                        >
                          Em Preparo
                        </button>
                        <button
                          onClick={() => handleStatusChange(order.id!, "delivering")}
                          className={`px-2 py-1 text-xs rounded-md ${
                            order.status === "delivering"
                              ? "bg-purple-600 text-white"
                              : "bg-purple-100 text-purple-800 hover:bg-purple-200"
                          }`}
                        >
                          Em Entrega
                        </button>
                        <button
                          onClick={() => handleStatusChange(order.id!, "completed")}
                          className={`px-2 py-1 text-xs rounded-md ${
                            order.status === "completed"
                              ? "bg-green-600 text-white"
                              : "bg-green-100 text-green-800 hover:bg-green-200"
                          }`}
                        >
                          Concluído
                        </button>
                        <button
                          onClick={() => handleStatusChange(order.id!, "cancelled")}
                          className={`px-2 py-1 text-xs rounded-md ${
                            order.status === "cancelled"
                              ? "bg-red-600 text-white"
                              : "bg-red-100 text-red-800 hover:bg-red-200"
                          }`}
                        >
                          Cancelado
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Modal de Impressão */}
      {isPrinterModalOpen && selectedOrder && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-auto">
            <div className="p-4 border-b">
              <h2 className="text-lg font-semibold text-purple-900">Imprimir Etiqueta</h2>
            </div>

            <div className="p-4">
              <OrderLabelPrinter order={selectedOrder} onPrintComplete={handlePrintComplete} />
            </div>

            <div className="p-4 border-t flex justify-end">
              <button
                onClick={() => setIsPrinterModalOpen(false)}
                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700"
              >
                Fechar
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
